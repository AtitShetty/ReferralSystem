package actors;

import java.util.concurrent.TimeUnit;

import javax.inject.Inject;

import akka.actor.AbstractActor;
import akka.actor.ActorRef;
import akka.actor.Props;
import akka.pattern.Patterns;
import akka.util.Timeout;
import drools.Exchanges;
import messages.AutoGenerateQueryMessage;
import messages.SupervisorMessage;
import plugins.Drools;
import referral_helper.ReferralUtil;
import scala.compat.java8.FutureConverters;

public class Supervisor extends AbstractActor {

	private Drools drool;

	public static Props getProps() {
		return Props.create(Supervisor.class);
	}

	@Inject
	public Supervisor() {
	}

	@Override
	public Receive createReceive() {
		return receiveBuilder().match(SupervisorMessage.class, query -> {
			System.out.println(drool);

			ReferralUtil.logDroolsMessage(Exchanges.HELPER_ACTOR, !Exchanges.SEND, "TriggerAutoGenerateQuery",
					!Exchanges.TELL);

			for (String peer : query.peers) {

				ReferralUtil.logDroolsMessage(Exchanges.HELPER_ACTOR, Exchanges.SEND,
						Exchanges.ASK_FOR_ACTOR_REF + peer,
						!Exchanges.TELL);

				ActorRef ref = FutureConverters
						.toJava(getContext().system().actorSelection("user/" + peer)
								.resolveOne(new Timeout(1, TimeUnit.MINUTES)))
						.thenApply(result -> (ActorRef) result).toCompletableFuture().get();

				ReferralUtil.logDroolsMessage(Exchanges.HELPER_ACTOR, !Exchanges.SEND,
						Exchanges.RECEIVED_ACTOR_REF + peer,
						!Exchanges.TELL);

				AutoGenerateQueryMessage request = new AutoGenerateQueryMessage(query.numberOfIterations);

				ReferralUtil.logDroolsMessage(Exchanges.HELPER_ACTOR, Exchanges.SEND, "AutoGenerateQuery" + peer,
						!Exchanges.TELL);

				FutureConverters.toJava(Patterns.ask(ref, request, new Timeout(10, TimeUnit.MINUTES)))
						.thenApply(result -> result).toCompletableFuture().get();

				ReferralUtil.logDroolsMessage(Exchanges.HELPER_ACTOR, !Exchanges.SEND,
						"AutoGeneratedQuery" + peer, !Exchanges.TELL);


			}

		}).build();
	}

}
